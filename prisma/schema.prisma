generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int       @id @default(autoincrement())
  fullname         String
  phone            String    @unique
  password         String
  plan             String
  referralId       String    @unique
  planStartDate    DateTime? @default(now())
  registrationPaid Boolean   @default(false)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  notifications    String[]  @default([])
  lastActivity     String?

  accounts            Account[]
  complaints          Complaint[]
  settlementAccounts  SettlementAccount[]
  Payment             Payment[]
  thriftSubscriptions ThriftSubscription[]
}

model Account {
  id                 Int      @id @default(autoincrement())
  accountNumber      String   @unique
  balance            Int      @default(0)
  totalContributions Int      @default(0)
  rewards            Int      @default(0)
  totalDebt          Int      @default(0)
  referralEarnings   Int      @default(0)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  userId       Int
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]
  referrals    Referral[]

  @@index([userId])
}

model Transaction {
  id                           Int      @id @default(autoincrement())
  reference                    String   @unique
  amount                       Int
  type                         String // topup, withdrawal, contribution, reward, etc.
  status                       String   @default("pending") // pending, successful, failed
  paymentMethod                String? // wema, alatpay, bank_transfer, etc.
  description                  String?
  platformTransactionReference String?
  createdAt                    DateTime @default(now())
  updatedAt                    DateTime @updatedAt

  accountId Int
  account   Account @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@index([accountId])
  @@index([status])
  @@index([createdAt])
}

model Referral {
  id             Int       @id @default(autoincrement())
  referralCode   String
  referredUserId Int?
  referredName   String?
  referredPhone  String?
  status         String    @default("pending") // pending, active, rewarded
  rewardAmount   Int       @default(0)
  rewardedAt     DateTime?
  createdAt      DateTime  @default(now())

  accountId Int
  account   Account @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@index([accountId])
  @@index([referralCode])
}

model Complaint {
  id          Int       @id @default(autoincrement())
  title       String
  description String    @db.Text
  category    String // account, transaction, service, other
  status      String    @default("open") // open, in_progress, resolved, closed
  priority    String    @default("normal") // low, normal, high, urgent
  resolution  String?   @db.Text
  resolvedAt  DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
  @@index([createdAt])
}

model SettlementAccount {
  id            Int      @id @default(autoincrement())
  bankName      String
  accountNumber String
  accountName   String
  isDefault     Boolean  @default(false)
  isVerified    Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Message {
  id        Int      @id @default(autoincrement())
  name      String
  email     String
  message   String   @db.Text
  createdAt DateTime @default(now())
}

model Payment {
  id                Int           @id @default(autoincrement())
  userId            Int
  businessId        String
  amount            Int
  currency          String
  orderId           String        @unique
  description       String
  customerEmail     String
  customerPhone     String
  customerFirstName String
  customerLastName  String
  customerMetadata  String?
  status            PaymentStatus @default(PENDING) // pending, successful, failed
  User              User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt         DateTime      @default(now())
}

enum PaymentStatus {
  PENDING
  SUCCESSFUL
  FAILED
}

model SettlementClearance {
  id            Int       @id @default(autoincrement())
  accountNumber String
  accountName   String
  amount        Int
  bankName      String
  dueDate       DateTime
  status        String    @default("pending") // pending, processing, cleared
  priority      String    @default("normal") // low, normal, high
  notes         String?   @db.Text
  clearedAt     DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([status])
  @@index([dueDate])
}

model PaidSettlementAccount {
  id             Int      @id @default(autoincrement())
  accountNumber  String
  accountName    String
  bankName       String
  amount         Int
  settlementDate DateTime
  reference      String   @unique
  paymentMethod  String?
  notes          String?  @db.Text
  createdAt      DateTime @default(now())

  @@index([settlementDate])
  @@index([reference])
}

model BulkWithdrawalRequest {
  id              Int       @id @default(autoincrement())
  requestId       String    @unique
  accountNumbers  String[] // Array of account numbers
  totalAmount     Int
  status          String    @default("pending") // pending, approved, processing, completed, rejected
  requestedBy     String
  approvedBy      String?
  approvedAt      DateTime?
  completedAt     DateTime?
  rejectedAt      DateTime?
  rejectionReason String?   @db.Text
  notes           String?   @db.Text
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([status])
  @@index([createdAt])
}

model NextSettlementAccount {
  id              Int      @id @default(autoincrement())
  accountNumber   String
  accountName     String
  bankName        String
  amount          Int
  scheduledDate   DateTime
  settlementCycle String // weekly, monthly, quarterly
  priority        String   @default("normal")
  status          String   @default("scheduled") // scheduled, processing, cancelled
  notes           String?  @db.Text
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([scheduledDate])
  @@index([status])
}

model ThriftPackage {
  id               Int      @id @default(autoincrement())
  name             String
  price            Int
  duration         Int // in weeks
  profitPercentage Int
  description      String   @db.Text
  terms            String   @db.Text
  isActive         Boolean  @default(true)
  minContribution  Int?
  maxContribution  Int?
  features         String[] @default([])
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  subscriptions ThriftSubscription[]

  @@index([isActive])
}

model ThriftSubscription {
  id             Int       @id @default(autoincrement())
  userId         Int
  packageId      Int
  amountInvested Int
  startDate      DateTime  @default(now())
  endDate        DateTime
  status         String    @default("active") // active, completed, cancelled
  expectedReturn Int
  actualReturn   Int?
  completedAt    DateTime?
  cancelledAt    DateTime?
  notes          String?   @db.Text
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  user    User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  package ThriftPackage @relation(fields: [packageId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([packageId])
  @@index([status])
}
